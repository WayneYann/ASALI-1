EXE := Asali

SRC_DIR := src
OBJ_DIR := obj

SRC_TO_IGNORE := $(SRC_DIR)/Asali.cpp $(SRC_DIR)/backend/asaliInterface.cpp

SRC := $(filter-out $(SRC_TO_IGNORE), $(wildcard $(SRC_DIR)/frontend/*.cpp) $(wildcard $(SRC_DIR)/backend/*.cpp) $(SRC_DIR)/main.cpp)

OBJ := $(SRC:$(SRC_DIR)/%.cpp=$(OBJ_DIR)/%.o)

CPPFLAGS := $(shell pkg-config gtkmm-3.0 gtk+-3.0 --cflags)\
            $(shell python3-config ${PYTHON_CONFIG} --cflags)\
            -I$(CANTERA_PREFIX)include\
            -I$(CANTERA_PREFIX)include/cantera/ext\
            -Iinclude

CFLAGS := -fPIC -Os -s -std=c++11 \
          -DASALI_ON_WINDOW=${ASALI_ON_WINDOW} \
          -DASALI_USING_CANTERA=${ASALI_USING_CANTERA} \
          -DCOMPILING_PATH=\"${COMPILING_PATH}\"

LDFLAGS:= -L$(CANTERA_PREFIX)lib
LDLIBS := $(shell pkg-config gtkmm-3.0 gtk+-3.0 --libs)\
          $(shell python3-config ${PYTHON_CONFIG} --libs)\
          -lcantera\
          -lcantera_fortran\
          -lgfortran\
          -lpthread\
          -lm

.PHONY: clean
clean:
	$(RM) $(OBJ) $(EXE)

.PHONY: help
help:
	@echo available targets: clean all help

.PHONY: all
all: $(EXE)

$(OBJ_DIR):
	mkdir $@
	mkdir $@/frontend
	mkdir $@/backend

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp | $(OBJ_DIR)
	$(CXX) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

$(EXE): $(OBJ)
	$(CXX) $(LDFLAGS) $^ $(LDLIBS) $(CFLAGS) -o $@


